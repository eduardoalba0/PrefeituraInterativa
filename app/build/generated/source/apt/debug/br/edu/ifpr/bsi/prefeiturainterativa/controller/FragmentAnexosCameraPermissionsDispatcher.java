// This file was generated by PermissionsDispatcher. Do not modify!
package br.edu.ifpr.bsi.prefeiturainterativa.controller;

import androidx.annotation.NonNull;
import java.lang.String;
import permissions.dispatcher.PermissionUtils;

final class FragmentAnexosCameraPermissionsDispatcher {
  private static final int REQUEST_ABRIRCAMERA = 0;

  private static final String[] PERMISSION_ABRIRCAMERA = new String[] {"android.permission.CAMERA","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_CAPTURARIMAGEM = 1;

  private static final String[] PERMISSION_CAPTURARIMAGEM = new String[] {"android.permission.CAMERA","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private FragmentAnexosCameraPermissionsDispatcher() {
  }

  static void abrirCameraWithPermissionCheck(@NonNull FragmentAnexosCamera target) {
    if (PermissionUtils.hasSelfPermissions(target.requireActivity(), PERMISSION_ABRIRCAMERA)) {
      target.abrirCamera();
    } else {
      target.requestPermissions(PERMISSION_ABRIRCAMERA, REQUEST_ABRIRCAMERA);
    }
  }

  static void capturarImagemWithPermissionCheck(@NonNull FragmentAnexosCamera target) {
    if (PermissionUtils.hasSelfPermissions(target.requireActivity(), PERMISSION_CAPTURARIMAGEM)) {
      target.capturarImagem();
    } else {
      target.requestPermissions(PERMISSION_CAPTURARIMAGEM, REQUEST_CAPTURARIMAGEM);
    }
  }

  static void onRequestPermissionsResult(@NonNull FragmentAnexosCamera target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_ABRIRCAMERA:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.abrirCamera();
      }
      break;
      case REQUEST_CAPTURARIMAGEM:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.capturarImagem();
      }
      break;
      default:
      break;
    }
  }
}
