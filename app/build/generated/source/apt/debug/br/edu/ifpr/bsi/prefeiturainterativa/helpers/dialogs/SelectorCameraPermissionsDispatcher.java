// This file was generated by PermissionsDispatcher. Do not modify!
package br.edu.ifpr.bsi.prefeiturainterativa.helpers.dialogs;

import androidx.annotation.NonNull;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class SelectorCameraPermissionsDispatcher {
  private static final int REQUEST_ABRIRCAMERA = 3;

  private static final String[] PERMISSION_ABRIRCAMERA = new String[] {"android.permission.CAMERA","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_CAPTURARIMAGEM = 4;

  private static final String[] PERMISSION_CAPTURARIMAGEM = new String[] {"android.permission.CAMERA","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_INITCAMERA = 5;

  private static final String[] PERMISSION_INITCAMERA = new String[] {"android.permission.CAMERA","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_TROCARCAMERA = 6;

  private static final String[] PERMISSION_TROCARCAMERA = new String[] {"android.permission.CAMERA","android.permission.READ_EXTERNAL_STORAGE","android.permission.WRITE_EXTERNAL_STORAGE"};

  private SelectorCameraPermissionsDispatcher() {
  }

  static void initCameraWithPermissionCheck(@NonNull SelectorCamera target) {
    if (PermissionUtils.hasSelfPermissions(target.requireActivity(), PERMISSION_INITCAMERA)) {
      target.initCamera();
    } else {
      target.requestPermissions(PERMISSION_INITCAMERA, REQUEST_INITCAMERA);
    }
  }

  static void abrirCameraWithPermissionCheck(@NonNull SelectorCamera target) {
    if (PermissionUtils.hasSelfPermissions(target.requireActivity(), PERMISSION_ABRIRCAMERA)) {
      target.abrirCamera();
    } else {
      target.requestPermissions(PERMISSION_ABRIRCAMERA, REQUEST_ABRIRCAMERA);
    }
  }

  static void capturarImagemWithPermissionCheck(@NonNull SelectorCamera target) {
    if (PermissionUtils.hasSelfPermissions(target.requireActivity(), PERMISSION_CAPTURARIMAGEM)) {
      target.capturarImagem();
    } else {
      target.requestPermissions(PERMISSION_CAPTURARIMAGEM, REQUEST_CAPTURARIMAGEM);
    }
  }

  static void trocarCameraWithPermissionCheck(@NonNull SelectorCamera target) {
    if (PermissionUtils.hasSelfPermissions(target.requireActivity(), PERMISSION_TROCARCAMERA)) {
      target.trocarCamera();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_TROCARCAMERA)) {
        target.showRationale(new SelectorCameraTrocarCameraPermissionRequest(target));
      } else {
        target.requestPermissions(PERMISSION_TROCARCAMERA, REQUEST_TROCARCAMERA);
      }
    }
  }

  static void onRequestPermissionsResult(@NonNull SelectorCamera target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_INITCAMERA:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.initCamera();
      }
      break;
      case REQUEST_ABRIRCAMERA:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.abrirCamera();
      }
      break;
      case REQUEST_CAPTURARIMAGEM:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.capturarImagem();
      }
      break;
      case REQUEST_TROCARCAMERA:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.trocarCamera();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_TROCARCAMERA)) {
          target.onNeverAskAgain();
        } else {
          target.onPermissionDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class SelectorCameraTrocarCameraPermissionRequest implements PermissionRequest {
    private final WeakReference<SelectorCamera> weakTarget;

    private SelectorCameraTrocarCameraPermissionRequest(@NonNull SelectorCamera target) {
      this.weakTarget = new WeakReference<SelectorCamera>(target);
    }

    @Override
    public void proceed() {
      SelectorCamera target = weakTarget.get();
      if (target == null) return;
      target.requestPermissions(PERMISSION_TROCARCAMERA, REQUEST_TROCARCAMERA);
    }

    @Override
    public void cancel() {
      SelectorCamera target = weakTarget.get();
      if (target == null) return;
      target.onPermissionDenied();
    }
  }
}
